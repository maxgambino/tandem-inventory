# Script de test rapide pour PostgreSQL
Write-Host "üß™ Test rapide de PostgreSQL pour Tandem" -ForegroundColor Cyan

# Test de connexion PostgreSQL
Write-Host "`nüîç Test de connexion PostgreSQL..." -ForegroundColor Yellow
try {
    $env:PGPASSWORD = "postgres"
    $result = psql -h localhost -U postgres -d postgres -c "SELECT version();" 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ PostgreSQL accessible" -ForegroundColor Green
    } else {
        throw "Erreur de connexion"
    }
} catch {
    Write-Host "‚ùå PostgreSQL non accessible" -ForegroundColor Red
    Write-Host "V√©rifiez que PostgreSQL est install√© et d√©marr√©" -ForegroundColor Yellow
    exit 1
}

# Test de la base de donn√©es tandem
Write-Host "`nüóÑÔ∏è Test de la base de donn√©es 'tandem'..." -ForegroundColor Yellow
try {
    $env:PGPASSWORD = "postgres"
    $result = psql -h localhost -U postgres -d tandem -c "SELECT COUNT(*) FROM \"Product\";" 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Base de donn√©es 'tandem' accessible" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è Base de donn√©es 'tandem' non trouv√©e" -ForegroundColor Yellow
        Write-Host "Ex√©cutez d'abord: .\migrate-to-postgresql.ps1" -ForegroundColor Cyan
    }
} catch {
    Write-Host "‚ùå Erreur d'acc√®s √† la base de donn√©es" -ForegroundColor Red
}

# Test de l'API backend
Write-Host "`nüîß Test de l'API backend..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "http://localhost:4000/health" -UseBasicParsing -TimeoutSec 5
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Backend accessible" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ö†Ô∏è Backend non accessible (peut-√™tre arr√™t√©)" -ForegroundColor Yellow
    Write-Host "D√©marrez le backend avec: npm run dev" -ForegroundColor Cyan
}

# Test de l'API products
Write-Host "`nüì¶ Test de l'API products..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "http://localhost:4000/api/products" -UseBasicParsing -TimeoutSec 5
    if ($response.StatusCode -eq 200) {
        $products = $response.Content | ConvertFrom-Json
        Write-Host "‚úÖ API products accessible avec $($products.Count) produits" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ö†Ô∏è API products non accessible" -ForegroundColor Yellow
}

Write-Host "`nüéâ Test termin√© !" -ForegroundColor Green
Write-Host "üì± Frontend: http://localhost:3000" -ForegroundColor White
Write-Host "üîß Backend: http://localhost:4000" -ForegroundColor White






